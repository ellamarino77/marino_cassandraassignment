# -*- coding: utf-8 -*-
"""MarinoCassCodes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q1ZBzgK7dm95e_JZvJL-sbC-YrB7WcBo
"""



!pip install cassandra-driver


from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
import json

cloud_config= {
  'secure_connect_bundle': 'secure-connect-ellamarino-cassandra.zip'
}


with open("ellamarino_cassandra-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

if session:
  print('Connected!')
else:
  print("An error occurred.")

session = cluster.connect()

import pandas as pd
df = pd.read_csv('https://raw.githubusercontent.com/gchandra10/filestorage/refs/heads/main/sales_100.csv')

session.execute("""
    CREATE TABLE IF NOT EXISTS cassandradata.sales_data (
    Region TEXT,
    Country TEXT,
    Item_Type TEXT,
    Sales_Channel TEXT,
    Order_Priority TEXT,
    Order_Date DATE,
    Order_ID BIGINT,
    Ship_Date DATE,
    Units_Sold INT,
    Unit_Price DECIMAL,
    Unit_Cost DECIMAL,
    Total_Revenue DECIMAL,
    Total_Cost DECIMAL,
    Total_Profit DECIMAL,
    PRIMARY KEY (Order_ID)
);
""")

import pandas as pd


file_path = 'https://raw.githubusercontent.com/gchandra10/filestorage/refs/heads/main/sales_100.csv'
df = pd.read_csv(file_path)

sorted_df = df.sort_values(by='Region')


sorted_df.to_csv('sorted_output.csv', index=False)

print(sorted_df)

session.execute("""
CREATE TABLE IF NOT EXISTS cassandradata.silver_sales (
    order_id uuid PRIMARY KEY,
    region text,
    country text,
    item_type text,
    sales_channel text,
    order_priority text,
    order_date text
);
""")

silver_df = df[
    (df['Region'] == 'Sub-Saharan Africa') &
    (df['Country'] == 'South Africa') &
    (df['Item Type'] == 'Fruits') &
    (df['Sales Channel'] == 'Offline') &
    (df['Order Priority'] == 'M')
]
from uuid import uuid4

for _, row in silver_df.iterrows():
    session.execute("""
        INSERT INTO cassandradata.silver_sales (order_id, region, country, item_type, sales_channel, order_priority, order_date)
        VALUES (%s, %s, %s, %s, %s, %s, %s)
    """, (
        uuid4(), row['Region'], row['Country'], row['Item Type'],
        row['Sales Channel'], row['Order Priority'], row['Order Date']
    ))

rows = session.execute("SELECT * FROM cassandradata.silver_sales")
silver_df = pd.DataFrame(rows)
print(silver_df.head())



from datetime import datetime


df = df.drop_duplicates()


df = df.dropna()


def parse_date(date_str):
    try:
        return datetime.strptime(date_str, "%m/%d/%Y")
    except:
        return None

df['Order Date'] = df['Order Date'].apply(parse_date)
df = df[df['Order Date'].notnull()]


valid_priorities = ['H', 'M', 'L', 'C']
df = df[df['Order Priority'].isin(valid_priorities)]


df = df[df['Order Date'] >= datetime(2000, 1, 1)]

df.to_csv("silver_cleaned.csv", index=False)
print("Cleaned data ready for Silver")

print(df.head())
print(f"\nTotal clean records: {len(df)}")

from datetime import datetime
from uuid import uuid4
import pandas as pd


df = pd.read_csv('https://raw.githubusercontent.com/gchandra10/filestorage/refs/heads/main/sales_100.csv')


df = df.drop_duplicates()
df = df.dropna()

def parse_date(date_str):
    try:
        return datetime.strptime(date_str, "%m/%d/%Y")
    except:
        return None

df['Order Date'] = df['Order Date'].apply(parse_date)
df = df[df['Order Date'].notnull()]
df = df[df['Order Priority'].isin(['H', 'M', 'L', 'C'])]
df = df[df['Order Date'] >= datetime(2000, 1, 1)]


silver_df = df[
    (df['Region'] == 'Sub-Saharan Africa') &
    (df['Country'] == 'South Africa') &
    (df['Item Type'] == 'Fruits') &
    (df['Sales Channel'] == 'Offline') &
    (df['Order Priority'] == 'M')
]


for _, row in silver_df.iterrows():
    session.execute("""
        INSERT INTO cassandradata.silver_sales (order_id, region, country, item_type, sales_channel, order_priority, order_date)
        VALUES (%s, %s, %s, %s, %s, %s, %s)
    """, (
        uuid4(), row['Region'], row['Country'], row['Item Type'],
        row['Sales Channel'], row['Order Priority'], row['Order Date'].strftime("%Y-%m-%d")
    ))


rows = session.execute("SELECT * FROM cassandradata.silver_sales")
silver_df = pd.DataFrame(rows)
print(silver_df.head())

session.execute("""
CREATE TABLE IF NOT EXISTS cassandradata.gold_sales_by_country (
    country TEXT PRIMARY KEY,
    total_units_sold INT,
    total_revenue DECIMAL
);
""")

sales_country = df.groupby('Country').agg({
    'UnitsSold': 'sum',
    'TotalRevenue': 'sum'
}).reset_index()

for _, row in sales_country.iterrows():
    session.execute("""
        INSERT INTO cassandradata.gold_sales_by_country (country, total_units_sold, total_revenue)
        VALUES (%s, %s, %s)
    """, (row['Country'], int(row['UnitsSold']), float(row['TotalRevenue'])))


rows = session.execute("SELECT * FROM cassandradata.gold_sales_by_country")

for row in rows:
    print(f"Country: {row.country}, Total Units Sold: {row.total_units_sold}, Total Revenue: {row.total_revenue}")

session.execute("DROP TABLE IF EXISTS cassandradata.customer_sales;")


session.execute("""
CREATE TABLE IF NOT EXISTS cassandradata.customer_sales (
    order_id TEXT PRIMARY KEY,
    total_revenue DECIMAL,
    total_purchases INT,
    most_purchased_product TEXT
);
""")


import uuid
from decimal import Decimal


customer_sales = df.groupby('Order ID').agg({
    'TotalRevenue': 'sum',
    'TotalProfit': 'sum',
    'UnitsSold': 'sum',
    'Item Type': 'first'
}).reset_index()


for _, row in customer_sales.iterrows():
    session.execute("""
        INSERT INTO cassandradata.customer_sales (order_id, total_revenue, total_purchases, most_purchased_product)
        VALUES (%s, %s, %s, %s)
    """, (str(row['Order ID']), float(row['TotalRevenue']), int(row['UnitsSold']), row['Item Type']))

rows = session.execute("SELECT * FROM cassandradata.customer_sales")


for row in rows:
    print(f"Order ID: {row.order_id}, Total Revenue: {row.total_revenue}, Total Purchases: {row.total_purchases}, Most Purchased Product: {row.most_purchased_product}")

session.execute("""
CREATE TABLE IF NOT EXISTS cassandradata.gold_sales_by_product_type (
    item_type TEXT PRIMARY KEY,
    total_units_sold INT,
    total_revenue DOUBLE,
    total_cost DOUBLE,
    total_profit DOUBLE,
    avg_unit_price DOUBLE,
    avg_unit_cost DOUBLE
);
""")

item_sales = df.groupby('Item Type').agg({
    'UnitsSold': 'sum',
    'TotalRevenue': 'sum',
    'TotalCost': 'sum',
    'TotalProfit': 'sum',
    'UnitPrice': 'mean',
    'UnitCost': 'mean'
}).reset_index()


for _, row in item_sales.iterrows():
    session.execute("""
        INSERT INTO cassandradata.gold_sales_by_product_type (
            item_type, total_units_sold, total_revenue, total_cost,
            total_profit, avg_unit_price, avg_unit_cost
        ) VALUES (%s, %s, %s, %s, %s, %s, %s)
    """, (
        row['Item Type'], int(row['UnitsSold']), float(row['TotalRevenue']),
        float(row['TotalCost']), float(row['TotalProfit']),
        float(row['UnitPrice']), float(row['UnitCost'])
    ))


rows = session.execute("SELECT * FROM cassandradata.gold_sales_by_product_type")
for row in rows:
    print(row)