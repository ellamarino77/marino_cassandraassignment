# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q1ZBzgK7dm95e_JZvJL-sbC-YrB7WcBo
"""



# Install the Cassandra python driver
!pip install cassandra-driver

# Import the necessary libraries
from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
import json

# This secure connect bundle is autogenerated when you download your SCB,
# if yours is different update the file name below
cloud_config= {
  'secure_connect_bundle': 'secure-connect-ellamarino-cassandra.zip'
}

# This token JSON file is autogenerated when you download your token,
# if yours is different update the file name below
with open("ellamarino_cassandra-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

if session:
  print('Connected!')
else:
  print("An error occurred.")

# Connect to the example Keyspace
session = cluster.connect()

# Load the CSV data into a pandas DataFrame
import pandas as pd
df = pd.read_csv('https://raw.githubusercontent.com/gchandra10/filestorage/refs/heads/main/sales_100.csv')

session.execute("""
    CREATE TABLE IF NOT EXISTS cassandradata.sales_data (
    Region TEXT,
    Country TEXT,
    Item_Type TEXT,
    Sales_Channel TEXT,
    Order_Priority TEXT,
    Order_Date DATE,
    Order_ID BIGINT,
    Ship_Date DATE,
    Units_Sold INT,
    Unit_Price DECIMAL,
    Unit_Cost DECIMAL,
    Total_Revenue DECIMAL,
    Total_Cost DECIMAL,
    Total_Profit DECIMAL,
    PRIMARY KEY (Order_ID)
);
""")

import pandas as pd

# Read the CSV file from the URL
file_path = 'https://raw.githubusercontent.com/gchandra10/filestorage/refs/heads/main/sales_100.csv'
df = pd.read_csv(file_path)

# Sort the entire data by 'Order Date' or any other column
sorted_df = df.sort_values(by='Region')

# Optional: Save the sorted data to a new CSV file
sorted_df.to_csv('sorted_output.csv', index=False)

# Print the resulting DataFrame to verify
print(sorted_df)

